{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/react-e-commerce-project/src/context/CartContext.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport CartReducer from './CartReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext(); //we create a context\n\nconst initialState = {\n  cartItems: [],\n  itemsCount: 0,\n  total: 0\n}; // we need an initial state that we will pass to useReducer hook\n\nconst CartContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // we create Cartcontext provider, it accepts children prop\n  const [state, dispatch] = useReducer(CartReducer, initialState); // we need a state. we set it to our use reducer\n  // the reducer takes in our reducer(cart reducer) and the initial state.\n  // the dispatch is function that runs the logic on the reducer(logic like add item to cart, remove item, delete item etc.\n  //and store the returns in the new state.)\n\n  const addProduct = product => dispatch({\n    type: 'ADD_ITEM',\n    payload: product\n  }); // creating an action creator, then we need to update our reducer\n  //to listen to the action type: ADD_ITEM\n\n\n  const increase = product => dispatch({\n    type: 'INCREASE',\n    payload: product\n  });\n\n  const contextValues = { ...state,\n    // we spread out the state\n    addProduct,\n    increase\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: contextValues,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartContextProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["/Users/decagon/react-e-commerce-project/src/context/CartContext.jsx"],"names":["React","createContext","useReducer","CartReducer","CartContext","initialState","cartItems","itemsCount","total","CartContextProvider","children","state","dispatch","addProduct","product","type","payload","increase","contextValues"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC,C,CAAqC;;AAE5C,MAAMI,YAAY,GAAG;AAAEC,EAAAA,SAAS,EAAE,EAAb;AAAiBC,EAAAA,UAAU,EAAE,CAA7B;AAAgCC,EAAAA,KAAK,EAAE;AAAvC,CAArB,C,CAAgE;;AAEhE,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAAE;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACC,WAAD,EAAcE,YAAd,CAApC,CAD0C,CACuB;AACrB;AAC5C;AACA;;AAEA,QAAMQ,UAAU,GAAIC,OAAD,IAAaF,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,OAAO,EAAEF;AAA5B,GAAD,CAAxC,CAN0C,CAMqC;AACvC;;;AACxC,QAAMG,QAAQ,GAAIH,OAAD,IAAaF,QAAQ,CAAC;AAACG,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,OAAO,EAAEF;AAA5B,GAAD,CAAtC;;AACA,QAAMI,aAAa,GAAG,EAClB,GAAGP,KADe;AACR;AACVE,IAAAA,UAFkB;AAGlBI,IAAAA;AAHkB,GAAtB;AAMA,sBAEI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,aAA7B;AAAA,cACKR;AADL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAQH,CAvBD;;GAAMD,mB;;KAAAA,mB;AAyBN,eAAeA,mBAAf","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport CartReducer from './CartReducer';\n\nexport const CartContext = createContext(); //we create a context\n\nconst initialState = { cartItems: [], itemsCount: 0, total: 0 } // we need an initial state that we will pass to useReducer hook\n\nconst CartContextProvider = ({ children }) => { // we create Cartcontext provider, it accepts children prop\n    const [state, dispatch] = useReducer(CartReducer, initialState); // we need a state. we set it to our use reducer\n                                                // the reducer takes in our reducer(cart reducer) and the initial state.\n    // the dispatch is function that runs the logic on the reducer(logic like add item to cart, remove item, delete item etc.\n    //and store the returns in the new state.)\n\n    const addProduct = (product) => dispatch({type: 'ADD_ITEM', payload: product}) // creating an action creator, then we need to update our reducer\n                                            //to listen to the action type: ADD_ITEM\n    const increase = (product) => dispatch({type: 'INCREASE', payload: product}) \n    const contextValues = {\n        ...state, // we spread out the state\n        addProduct,\n        increase,\n    }\n\n    return (\n\n        <CartContext.Provider value={contextValues}>\n            {children}\n        </CartContext.Provider>\n\n    );\n    \n}\n\nexport default CartContextProvider;\n\n"]},"metadata":{},"sourceType":"module"}